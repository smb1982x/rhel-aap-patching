---
# JOB TEMPLATE NOTE:
# - Inventory: RHEL Linux fleet  
# - Expects contact_success_hosts from previous workflow step
# - Extra vars expected: vcenter_server, vcenter_user, vcenter_pass, datacenter_name
#   Optional: vmware_validate_certs, snapshot_label, snapshot_quiesce, snapshot_memory_dump,
#            snapshot_async_timeout, snapshot_poll_interval, snapshot_name_expected
# - Creates VM snapshots with proper error handling

- name: Calculate snapshot name for this workflow run
  hosts: localhost
  gather_facts: false
  run_once: true
  tasks:
    - name: Generate snapshot name if not provided
      set_fact:
        calculated_snapshot_name: >-
          {{
            snapshot_name_expected | default('automated-snapshot_' ~ 
            (snapshot_label | default('Patching')) ~ '_' ~ 
            lookup('pipe','date +%Y%m%d-%H%M%S'))
          }}

    - name: Store snapshot name globally
      set_stats:
        data:
          snapshot_name_expected: "{{ calculated_snapshot_name }}"
        aggregate: true
        per_host: false

- name: Validate hosts available for snapshot creation
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Check if contact testing produced any successful hosts
      fail:
        msg: "No hosts available for snapshot creation - contact_success_hosts is empty"
      when: ansible_stats.data.contact_success_hosts | default([]) | length == 0

    - name: Create dynamic inventory group for snapshot creation
      add_host:
        hostname: "{{ item }}"
        groups: "snapshot_targets"
        vm_folder: "{{ ansible_stats.data.vm_folder_map[item] | default('') }}"
        vm_name_resolved: "{{ ansible_stats.data.vm_name_map[item] | default(item) }}"
        snapshot_name_expected: "{{ hostvars['localhost']['calculated_snapshot_name'] }}"
      loop: "{{ ansible_stats.data.contact_success_hosts | default([]) }}"

- name: Take concurrent VM snapshots and wait for completion
  hosts: snapshot_targets
  gather_facts: false
  vars:
    vmware_validate_certs: "{{ vmware_validate_certs | default(true) }}"
    snapshot_label: "{{ snapshot_label | default('Patching') }}"
    snapshot_quiesce: "{{ snapshot_quiesce | default(false) }}"
    snapshot_memory_dump: "{{ snapshot_memory_dump | default(true) }}"
    snapshot_async_timeout: "{{ snapshot_async_timeout | default(10800) }}"  # 3h
    snapshot_poll_interval: "{{ snapshot_poll_interval | default(60) }}"     # seconds
    # Simplified: Use single authoritative source
    resolved_snapshot_name: "{{ hostvars['localhost']['calculated_snapshot_name'] }}"
  tasks:
    - name: Refresh VM folder/name information from vCenter
      community.vmware.vmware_guest_info:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        validate_certs: "{{ vmware_validate_certs }}"
        datacenter: "{{ datacenter_name }}"
        name: "{{ vm_name_resolved | default(hostvars[inventory_hostname].vm_name | default(inventory_hostname)) }}"
      register: vm_info_refresh
      delegate_to: localhost
      failed_when: false

    - name: Start VM snapshot creation asynchronously
      community.vmware.vmware_guest_snapshot:
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        validate_certs: "{{ vmware_validate_certs }}"
        datacenter: "{{ datacenter_name }}"
        folder: "{{ vm_info_refresh.instance.hw_folder | default(vm_folder) }}"
        name: "{{ vm_info_refresh.instance.hw_name | default(vm_name_resolved) }}"
        state: present
        snapshot_name: "{{ resolved_snapshot_name }}"
        quiesce: "{{ snapshot_quiesce }}"
        memory_dump: "{{ snapshot_memory_dump }}"
      async: "{{ snapshot_async_timeout }}"
      poll: 0
      register: snap_async
      delegate_to: localhost
      failed_when: false
      when: 
        - not (vm_info_refresh.failed | default(false))
        - vm_info_refresh.instance is defined

    - name: Wait for snapshot creation to complete
      async_status:
        jid: "{{ snap_async.ansible_job_id }}"
      register: snap_wait
      until: (snap_wait.finished | default(0)) | int == 1
      retries: "{{ (snapshot_async_timeout | int // snapshot_poll_interval | int) + 1 }}"
      delay: "{{ snapshot_poll_interval | int }}"
      delegate_to: localhost
      failed_when: false
      when: snap_async.ansible_job_id is defined

    - name: Cleanup async job files
      async_status:
        jid: "{{ snap_async.ansible_job_id }}"
        mode: cleanup
      delegate_to: localhost
      changed_when: false
      failed_when: false
      when: snap_async.ansible_job_id is defined

    - name: Record successful snapshot results
      set_stats:
        data:
          snapshot_success_hosts: "{{ ansible_stats.data.snapshot_success_hosts | default([]) + [inventory_hostname] }}"
          snapshot_name_map: >-
            {{
              ansible_stats.data.snapshot_name_map | default({}) | combine({
                inventory_hostname: resolved_snapshot_name
              })
            }}
        aggregate: true
        per_host: false
      when: >
        snap_async.ansible_job_id is defined and
        not (snap_wait.failed | default(false)) and
        (snap_wait.finished | default(0)) | int == 1 and
        not (snap_async.failed | default(false))

    - name: Record failed snapshot results
      set_stats:
        data:
          snapshot_failed_hosts: "{{ ansible_stats.data.snapshot_failed_hosts | default([]) + [inventory_hostname] }}"
          snapshot_failure_reasons: >-
            {{
              ansible_stats.data.snapshot_failure_reasons | default({}) | combine({
                inventory_hostname: snap_wait.stderr | default(snap_async.msg | default('Unknown snapshot error'))
              })
            }}
        aggregate: true
        per_host: false
      when: >
        (vm_info_refresh.failed | default(false)) or
        (snap_async.failed | default(false)) or
        (snap_wait.failed | default(false)) or
        (snap_async.ansible_job_id is defined and (snap_wait.finished | default(0)) | int != 1)

    - name: Store per-host VM facts for later workflow steps
      when: 
        - not (vm_info_refresh.failed | default(false))
        - vm_info_refresh.instance is defined
      ansible.builtin.set_fact:
        vm_folder: "{{ vm_info_refresh.instance.hw_folder }}"
        vm_name_resolved: "{{ vm_info_refresh.instance.hw_name | default(hostvars[inventory_hostname].vm_name | default(inventory_hostname)) }}"

    - name: Display snapshot results for this host
      debug:
        msg: |
          Host: {{ inventory_hostname }}
          VM Info Refresh: {{ 'SUCCESS' if not (vm_info_refresh.failed | default(false)) else 'FAILED' }}
          Snapshot Creation: {{ 'SUCCESS' if (snap_async.ansible_job_id is defined and not (snap_wait.failed | default(false)) and (snap_wait.finished | default(0)) | int == 1) else 'FAILED' }}
          Snapshot Name: {{ resolved_snapshot_name }}
          {% if snap_wait.failed | default(false) or snap_async.failed | default(false) %}
          Error: {{ snap_wait.stderr | default(snap_async.msg | default('Unknown error')) }}
          {% endif %}

- name: Display snapshot phase summary
  hosts: localhost
  gather_facts: false
  run_once: true
  tasks:
    - name: Display snapshot phase summary
      debug:
        msg: |
          ========================================
          SNAPSHOT PHASE COMPLETED
          ========================================
          Target Hosts: {{ ansible_stats.data.contact_success_hosts | default([]) | length }}
          Successful: {{ ansible_stats.data.snapshot_success_hosts | default([]) | length }}
          Failed: {{ ansible_stats.data.snapshot_failed_hosts | default([]) | length }}
          Success Rate: {{ ((ansible_stats.data.snapshot_success_hosts | default([]) | length) * 100.0 / (ansible_stats.data.contact_success_hosts | default([]) | length)) | round(1) }}%
          Snapshot Name: {{ hostvars['localhost']['calculated_snapshot_name'] }}
          ========================================
          Successful Hosts: {{ ansible_stats.data.snapshot_success_hosts | default([]) | join(', ') }}
          Failed Hosts: {{ ansible_stats.data.snapshot_failed_hosts | default([]) | join(', ') }}
          ========================================