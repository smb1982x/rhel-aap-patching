---
# JOB TEMPLATE NOTE:
# - Expects patch_success_hosts from previous workflow step
# - Performs system reboot and validates post-reboot connectivity

- name: Validate hosts available for reboot
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Check if patching produced any successful hosts
      ansible.builtin.fail:
        msg: "No hosts available for reboot - patch_success_hosts is empty"
      when: patch_success_hosts | default([]) | length == 0

    - name: Create dynamic inventory group for reboot
      ansible.builtin.add_host:
        hostname: "{{ item }}"
        groups: "reboot_targets"
      loop: "{{ patch_success_hosts | default([]) }}"

- name: Reboot after patch
  hosts: reboot_targets
  gather_facts: false
  become: true
  vars:
    reboot_timeout: "{{ reboot_timeout | default(1800) }}"    # 30m
    pre_reboot_delay: "{{ pre_reboot_delay | default(0) }}"
    post_reboot_delay: "{{ post_reboot_delay | default(30) }}"
  tasks:
    - name: Perform system reboot and wait for return
      ansible.builtin.reboot:
        reboot_timeout: "{{ reboot_timeout }}"
        pre_reboot_delay: "{{ pre_reboot_delay }}"
        post_reboot_delay: "{{ post_reboot_delay }}"
        test_command: "whoami"
      register: reboot_result
      failed_when: false

    - name: Validate post-reboot connectivity
      ansible.builtin.wait_for_connection:
        timeout: 300
        delay: 10
      register: post_reboot_connectivity
      failed_when: false
      when: reboot_result.rebooted | default(false)

    - name: Record successful reboot results
      ansible.builtin.set_stats:
        data:
          reboot_success_hosts: "{{ reboot_success_hosts | default([]) + [inventory_hostname] }}"
          reboot_duration_map: >-
            {{
              reboot_duration_map | default({}) | combine({
                inventory_hostname: reboot_result.elapsed | default(0)
              })
            }}
        aggregate: true
        per_host: false
      when: >
        not (reboot_result.failed | default(false)) and
        reboot_result.rebooted | default(false) and
        not (post_reboot_connectivity.failed | default(false))

    - name: Record failed reboot results
      ansible.builtin.set_stats:
        data:
          reboot_failed_hosts: "{{ reboot_failed_hosts | default([]) + [inventory_hostname] }}"
          reboot_failure_reasons: >-
            {{
              reboot_failure_reasons | default({}) | combine({
                inventory_hostname: reboot_result.msg | default('Reboot failed or connectivity lost')
              })
            }}
        aggregate: true
        per_host: false
      when: >
        reboot_result.failed | default(false) or
        not (reboot_result.rebooted | default(false)) or
        post_reboot_connectivity.failed | default(false)

    - name: Display reboot results for this host
      ansible.builtin.debug:
        msg: |
          Host: {{ inventory_hostname }}
          Reboot Status: {{ 'SUCCESS' if (not (reboot_result.failed | default(false)) and reboot_result.rebooted | default(false)) else 'FAILED' }}
          Reboot Duration: {{ reboot_result.elapsed | default(0) }} seconds
          Post-Reboot Connectivity: {{ 'SUCCESS' if not (post_reboot_connectivity.failed | default(false)) else 'FAILED' }}
          {% if reboot_result.failed | default(false) %}
          Error: {{ reboot_result.msg | default('Unknown reboot error') }}
          {% endif %}

- name: Reboot phase summary
  hosts: localhost
  gather_facts: false
  run_once: true
  tasks:
    - name: Calculate reboot metrics safely
      ansible.builtin.set_fact:
        total_targets: "{{ patch_success_hosts | default([]) | length }}"
        total_rebooted: "{{ reboot_success_hosts | default([]) | length }}"
        total_reboot_failed: "{{ reboot_failed_hosts | default([]) | length }}"

    - name: Calculate reboot success percentage
      ansible.builtin.set_fact:
        reboot_percentage: >-
          {{
            (total_targets | int > 0) |
            ternary(
              ((total_rebooted | int * 100.0) / (total_targets | int)) | round(1),
              0.0
            )
          }}

    - name: Display reboot summary
      ansible.builtin.debug:
        msg: |
          ========================================
          REBOOT PHASE COMPLETED
          ========================================
          Target Hosts: {{ total_targets }}
          Successful: {{ total_rebooted }}
          Failed: {{ total_reboot_failed }}
          Success Rate: {{ reboot_percentage }}%
          ========================================
          Successful Hosts: {{ reboot_success_hosts | default([]) | join(', ') }}
          Failed Hosts: {{ reboot_failed_hosts | default([]) | join(', ') }}
          ========================================
