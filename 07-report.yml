---
# JOB TEMPLATE NOTE:
# - Inventory: localhost only
# - Extra vars required: gitlab_repo_url, gitlab_token
# - Optional: gitlab_branch, gitlab_user_name, gitlab_user_email, publish_base_path
# - Generates comprehensive HTML and CSV reports AND publishes them to GitLab

- name: Build and publish HTML summary report and CSV files
  hosts: localhost
  gather_facts: true
  ignore_errors: true
  any_errors_fatal: false
  vars:
    # Report generation variables
    wf_report_root: "{{ (ansible_env.HOME | default('/runner')) ~ '/aap_reports' }}"
    wf_run_date: "{{ ansible_date_time.date }}"
    wf_run_ts: "{{ ansible_date_time.epoch }}"
    wf_report_dir: "{{ wf_report_root }}/reports_{{ wf_run_date | regex_replace('-', '') }}"
    wf_report_file: "{{ wf_report_dir }}/aap_patch_report_{{ wf_run_ts }}.html"
    
    # GitLab publishing variables
    gitlab_repo_url: "{{ gitlab_repo_url | mandatory }}"
    gitlab_token: "{{ gitlab_token | mandatory }}"
    gitlab_branch: "{{ gitlab_branch | default('main') }}"
    gitlab_user_name: "{{ gitlab_user_name | default('AAP Automation') }}"
    gitlab_user_email: "{{ gitlab_user_email | default('aap-automation@company.com') }}"
    publish_base_path: "{{ publish_base_path | default('patch-reports') }}"
    
    # Local repository path for GitLab operations
    repo_local_path: "/tmp/gitlab_repo_{{ wf_run_ts }}"

    # Construct authenticated GitLab URL (OAuth token for HTTPS)
    gitlab_auth_url: >-
      {{
        gitlab_repo_url | regex_replace('^https://', 'https://oauth2:' + gitlab_token + '@')
        if gitlab_repo_url.startswith('https://')
        else gitlab_repo_url
      }}
  
  tasks:
    # ===========================================
    # REPORT GENERATION SECTION
    # ===========================================
    
    - name: Create consistent display timestamp
      set_fact:
        wf_display_ts: "{{ '%Y%m%d-%H%M%S' | strftime(wf_run_ts | int) }}"
        wf_iso_ts: "{{ '%Y-%m-%dT%H:%M:%S+00:00' | strftime(wf_run_ts | int) }}"
      ignore_errors: true
      failed_when: false

    - name: Validate critical report paths
      assert:
        that:
          - wf_report_root is defined and wf_report_root != ""
          - wf_report_dir is defined and wf_report_dir != ""
          - wf_report_file is defined and wf_report_file != ""
          - wf_run_date is defined
          - wf_run_ts is defined
          - gitlab_repo_url is defined and gitlab_repo_url != ""
          - gitlab_token is defined and gitlab_token != ""
        fail_msg: "Invalid or missing required variables for report generation or GitLab publishing"
      ignore_errors: true
      failed_when: false

    - name: Debug available workflow statistics
      debug:
        msg: |
          Available statistics data:
          - discovery_success_hosts: {{ ansible_stats.data.discovery_success_hosts | default([]) | length }}
          - contact_success_hosts: {{ ansible_stats.data.contact_success_hosts | default([]) | length }}
          - snapshot_success_hosts: {{ ansible_stats.data.snapshot_success_hosts | default([]) | length }}
          - verify_success_hosts: {{ ansible_stats.data.verify_success_hosts | default([]) | length }}
          - patch_success_hosts: {{ ansible_stats.data.patch_success_hosts | default([]) | length }}
          - reboot_success_hosts: {{ ansible_stats.data.reboot_success_hosts | default([]) | length }}
          - health_success_hosts: {{ ansible_stats.data.health_success_hosts | default([]) | length }}
          Full ansible_stats.data keys: {{ ansible_stats.data.keys() | list if ansible_stats.data is defined else 'No stats data available' }}
      ignore_errors: true
      failed_when: false

    - name: Ensure report directory exists
      file:
        path: "{{ wf_report_dir }}"
        state: directory
        mode: "0755"
        recurse: true
      ignore_errors: true
      failed_when: false

    - name: Calculate overall success and failure lists
      set_fact:
        discovery_success: "{{ ansible_stats.data.discovery_success_hosts | default([]) }}"
        discovery_failed: "{{ ansible_stats.data.discovery_failed_hosts | default([]) }}"
        contact_success: "{{ ansible_stats.data.contact_success_hosts | default([]) }}"
        contact_failed: "{{ ansible_stats.data.contact_failed_hosts | default([]) }}"
        snapshot_success: "{{ ansible_stats.data.snapshot_success_hosts | default([]) }}"
        snapshot_failed: "{{ ansible_stats.data.snapshot_failed_hosts | default([]) }}"
        verify_success: "{{ ansible_stats.data.verify_success_hosts | default([]) }}"
        verify_failed: "{{ ansible_stats.data.verify_failed_hosts | default([]) }}"
        patch_success: "{{ ansible_stats.data.patch_success_hosts | default([]) }}"
        patch_failed: "{{ ansible_stats.data.patch_failed_hosts | default([]) }}"
        reboot_success: "{{ ansible_stats.data.reboot_success_hosts | default([]) }}"
        reboot_failed: "{{ ansible_stats.data.reboot_failed_hosts | default([]) }}"
        health_success: "{{ ansible_stats.data.health_success_hosts | default([]) }}"
        health_failed: "{{ ansible_stats.data.health_failed_hosts | default([]) }}"
        
        overall_success: "{{ ansible_stats.data.health_success_hosts | default([]) }}"
        overall_failure: >-
          {{
            (ansible_stats.data.discovery_failed_hosts | default([])) +
            (ansible_stats.data.contact_failed_hosts | default([])) +
            (ansible_stats.data.snapshot_failed_hosts | default([])) +
            (ansible_stats.data.verify_failed_hosts | default([])) +
            (ansible_stats.data.patch_failed_hosts | default([])) +
            (ansible_stats.data.reboot_failed_hosts | default([])) +
            (ansible_stats.data.health_failed_hosts | default([]))
            | unique
          }}
        total_hosts: >-
          {{
            ((ansible_stats.data.discovery_success_hosts | default([])) + (ansible_stats.data.discovery_failed_hosts | default([]))) | length
          }}
      ignore_errors: true
      failed_when: false

    - name: Generate CSV files for engineers
      copy:
        dest: "{{ wf_report_dir }}/{{ item.name }}.csv"
        content: |
          hostname
          {% for host in item.hosts %}
          {{ host }}
          {% endfor %}
        mode: "0644"
      loop:
        - { name: "discovery_success", hosts: "{{ discovery_success }}" }
        - { name: "discovery_failure", hosts: "{{ discovery_failed }}" }
        - { name: "contact_success", hosts: "{{ contact_success }}" }
        - { name: "contact_failure", hosts: "{{ contact_failed }}" }
        - { name: "snapshot_success", hosts: "{{ snapshot_success }}" }
        - { name: "snapshot_failure", hosts: "{{ snapshot_failed }}" }
        - { name: "verify_success", hosts: "{{ verify_success }}" }
        - { name: "verify_failure", hosts: "{{ verify_failed }}" }
        - { name: "patch_success", hosts: "{{ patch_success }}" }
        - { name: "patch_failure", hosts: "{{ patch_failed }}" }
        - { name: "reboot_success", hosts: "{{ reboot_success }}" }
        - { name: "reboot_failure", hosts: "{{ reboot_failed }}" }
        - { name: "health_success", hosts: "{{ health_success }}" }
        - { name: "health_failure", hosts: "{{ health_failed }}" }
        - { name: "overall_success", hosts: "{{ overall_success }}" }
        - { name: "overall_failure", hosts: "{{ overall_failure }}" }
      ignore_errors: true
      failed_when: false
      register: csv_generation_result

    - name: Compose enhanced report content
      set_fact:
        report_html: |
          <!doctype html>
          <html lang="en"><head>
            <meta charset="utf-8" />
            <title>AAP Patch Workflow Report - {{ wf_display_ts }}</title>
            <style>
              body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;margin:24px;background:#f8f9fa}
              .container{max-width:1200px;margin:0 auto;background:white;padding:24px;border-radius:12px;box-shadow:0 4px 6px rgba(0,0,0,.1)}
              h1{margin-bottom:8px;color:#2c3e50} h2{color:#34495e;border-bottom:2px solid #3498db;padding-bottom:8px}
              small{color:#666} .timestamp{color:#888;font-size:0.9em}
              .grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:16px;margin:20px 0}
              .card{border:1px solid #ddd;border-radius:8px;padding:16px;background:white;box-shadow:0 2px 4px rgba(0,0,0,.05)}
              .success{color:#27ae60;font-weight:600} .failure{color:#e74c3c;font-weight:600}
              .summary{background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);color:white;border:none;margin:20px 0}
              .summary h2{color:white;border-bottom:2px solid rgba(255,255,255,0.3)}
              code{background:#ecf0f1;padding:3px 6px;border-radius:4px;font-size:0.9em;color:#2c3e50}
              .percentage{font-size:0.85em;color:#7f8c8d;margin-left:8px;font-weight:normal}
              .phase-header{font-size:1.1em;font-weight:600;margin-bottom:12px;color:#2c3e50}
              .metric-row{display:flex;justify-content:space-between;align-items:center;margin:8px 0}
              .status-badge{padding:4px 8px;border-radius:4px;font-size:0.8em;font-weight:600}
              .badge-success{background:#d4edda;color:#155724} .badge-failure{background:#f8d7da;color:#721c24}
              .host-list{font-size:0.9em;color:#495057;margin-top:8px;max-height:100px;overflow-y:auto}
              .error{background:#f8d7da;border:1px solid #f5c6cb;color:#721c24;padding:12px;border-radius:6px;margin:12px 0}
            </style>
          </head><body>
            <div class="container">
            <h1>AAP Patch Workflow Report</h1>
            <div class="timestamp">Generated: {{ wf_iso_ts }} | Run ID: {{ wf_display_ts }}</div>

            <div class="card summary">
              <h2>Executive Summary</h2>
              <div class="metric-row">
                <span>Total Hosts Processed:</span>
                <span><strong>{{ total_hosts | int }}</strong></span>
              </div>
              <div class="metric-row">
                <span>Successfully Completed Entire Workflow:</span>
                <span class="success">{{ overall_success | length }} <span class="percentage">({{ ((overall_success | length) * 100.0 / (total_hosts | int)) | round(1) if (total_hosts | int) > 0 else 0.0 }}%)</span></span>
              </div>
              <div class="metric-row">
                <span>Failed at Some Stage:</span>
                <span class="failure">{{ overall_failure | length }} <span class="percentage">({{ ((overall_failure | length) * 100.0 / (total_hosts | int)) | round(1) if (total_hosts | int) > 0 else 0.0 }}%)</span></span>
              </div>
              {% if ansible_stats.data.snapshot_name_expected is defined %}
              <div class="metric-row">
                <span>Snapshot Name Created:</span>
                <span><code>{{ ansible_stats.data.snapshot_name_expected }}</code></span>
              </div>
              {% endif %}
              {% if total_hosts | int == 0 %}
              <div class="error">
                <strong>Warning:</strong> No hosts were processed in this workflow execution.
              </div>
              {% endif %}
            </div>

            <h2>Workflow Phase Results</h2>
            <div class="grid">
              <div class="card">
                <div class="phase-header">Discovery Phase</div>
                <div class="metric-row">
                  <span>Success:</span>
                  <span class="status-badge badge-success">{{ discovery_success | length }}</span>
                </div>
                <div class="metric-row">
                  <span>Failure:</span>
                  <span class="status-badge badge-failure">{{ discovery_failed | length }}</span>
                </div>
                {% set disc_total = (discovery_success | length) + (discovery_failed | length) %}
                {% if disc_total > 0 %}
                <div class="percentage">{{ (discovery_success | length * 100.0 / disc_total) | round(1) }}% success rate</div>
                {% endif %}
                {% if discovery_failed | length > 0 %}
                <div class="host-list"><strong>Failed:</strong> {{ discovery_failed | join(', ') }}</div>
                {% endif %}
              </div>

              <div class="card">
                <div class="phase-header">Contact Phase</div>
                <div class="metric-row">
                  <span>Success:</span>
                  <span class="status-badge badge-success">{{ contact_success | length }}</span>
                </div>
                <div class="metric-row">
                  <span>Failure:</span>
                  <span class="status-badge badge-failure">{{ contact_failed | length }}</span>
                </div>
                {% set cont_total = (contact_success | length) + (contact_failed | length) %}
                {% if cont_total > 0 %}
                <div class="percentage">{{ (contact_success | length * 100.0 / cont_total) | round(1) }}% success rate</div>
                {% endif %}
                {% if contact_failed | length > 0 %}
                <div class="host-list"><strong>Failed:</strong> {{ contact_failed | join(', ') }}</div>
                {% endif %}
              </div>

              <div class="card">
                <div class="phase-header">Snapshot Phase</div>
                <div class="metric-row">
                  <span>Success:</span>
                  <span class="status-badge badge-success">{{ snapshot_success | length }}</span>
                </div>
                <div class="metric-row">
                  <span>Failure:</span>
                  <span class="status-badge badge-failure">{{ snapshot_failed | length }}</span>
                </div>
                {% set snap_total = (snapshot_success | length) + (snapshot_failed | length) %}
                {% if snap_total > 0 %}
                <div class="percentage">{{ (snapshot_success | length * 100.0 / snap_total) | round(1) }}% success rate</div>
                {% endif %}
                {% if snapshot_failed | length > 0 %}
                <div class="host-list"><strong>Failed:</strong> {{ snapshot_failed | join(', ') }}</div>
                {% endif %}
              </div>

              <div class="card">
                <div class="phase-header">Verify Phase</div>
                <div class="metric-row">
                  <span>Success:</span>
                  <span class="status-badge badge-success">{{ verify_success | length }}</span>
                </div>
                <div class="metric-row">
                  <span>Failure:</span>
                  <span class="status-badge badge-failure">{{ verify_failed | length }}</span>
                </div>
                {% set ver_total = (verify_success | length) + (verify_failed | length) %}
                {% if ver_total > 0 %}
                <div class="percentage">{{ (verify_success | length * 100.0 / ver_total) | round(1) }}% success rate</div>
                {% endif %}
                {% if verify_failed | length > 0 %}
                <div class="host-list"><strong>Failed:</strong> {{ verify_failed | join(', ') }}</div>
                {% endif %}
              </div>

              <div class="card">
                <div class="phase-header">Patch Phase</div>
                <div class="metric-row">
                  <span>Success:</span>
                  <span class="status-badge badge-success">{{ patch_success | length }}</span>
                </div>
                <div class="metric-row">
                  <span>Failure:</span>
                  <span class="status-badge badge-failure">{{ patch_failed | length }}</span>
                </div>
                {% set patch_total = (patch_success | length) + (patch_failed | length) %}
                {% if patch_total > 0 %}
                <div class="percentage">{{ (patch_success | length * 100.0 / patch_total) | round(1) }}% success rate</div>
                {% endif %}
                {% if patch_failed | length > 0 %}
                <div class="host-list"><strong>Failed:</strong> {{ patch_failed | join(', ') }}</div>
                {% endif %}
                
                {% if ansible_stats.data.patch_failure_reasons is defined and patch_failed | length > 0 %}
                <div class="host-list">
                  <strong>Failure Reasons:</strong>
                  {% for host in patch_failed %}
                  <br>- {{ host }}: {{ ansible_stats.data.patch_failure_reasons[host] | default('Unknown error') }}
                  {% endfor %}
                </div>
                {% endif %}
              </div>

              <div class="card">
                <div class="phase-header">Reboot Phase</div>
                <div class="metric-row">
                  <span>Success:</span>
                  <span class="status-badge badge-success">{{ reboot_success | length }}</span>
                </div>
                <div class="metric-row">
                  <span>Failure:</span>
                  <span class="status-badge badge-failure">{{ reboot_failed | length }}</span>
                </div>
                {% set reb_total = (reboot_success | length) + (reboot_failed | length) %}
                {% if reb_total > 0 %}
                <div class="percentage">{{ (reboot_success | length * 100.0 / reb_total) | round(1) }}% success rate</div>
                {% endif %}
                {% if reboot_failed | length > 0 %}
                <div class="host-list"><strong>Failed:</strong> {{ reboot_failed | join(', ') }}</div>
                {% endif %}
              </div>

              <div class="card">
                <div class="phase-header">Health Check Phase</div>
                <div class="metric-row">
                  <span>Success:</span>
                  <span class="status-badge badge-success">{{ health_success | length }}</span>
                </div>
                <div class="metric-row">
                  <span>Failure:</span>
                  <span class="status-badge badge-failure">{{ health_failed | length }}</span>
                </div>
                {% set health_total = (health_success | length) + (health_failed | length) %}
                {% if health_total > 0 %}
                <div class="percentage">{{ (health_success | length * 100.0 / health_total) | round(1) }}% success rate</div>
                {% endif %}
                {% if health_failed | length > 0 %}
                <div class="host-list"><strong>Failed:</strong> {{ health_failed | join(', ') }}</div>
                {% endif %}
                
                {% if ansible_stats.data.health_failure_details is defined and health_failed | length > 0 %}
                <div class="host-list">
                  <strong>Health Issues:</strong>
                  {% for host in health_failed %}
                  <br>- {{ host }}: {{ ansible_stats.data.health_failure_details[host].error_summary | default('Unknown health issue') }}
                  {% endfor %}
                </div>
                {% endif %}
              </div>
            </div>

            <div class="card">
              <h2>Engineering Resources</h2>
              <p>The following CSV files have been generated and published to GitLab for detailed analysis:</p>
              <ul>
                <li><strong>discovery_success.csv / discovery_failure.csv</strong> - Host discovery results</li>
                <li><strong>contact_success.csv / contact_failure.csv</strong> - SSH connectivity test results</li>
                <li><strong>snapshot_success.csv / snapshot_failure.csv</strong> - VM snapshot creation results</li>
                <li><strong>verify_success.csv / verify_failure.csv</strong> - Pre-patch verification results</li>
                <li><strong>patch_success.csv / patch_failure.csv</strong> - Patch installation results</li>
                <li><strong>reboot_success.csv / reboot_failure.csv</strong> - System reboot results</li>
                <li><strong>health_success.csv / health_failure.csv</strong> - Post-patch health check results</li>
                <li><strong>overall_success.csv / overall_failure.csv</strong> - Final workflow completion status</li>
              </ul>
            </div>

            <div class="card">
              <h2>Workflow Metrics</h2>
              <div class="metric-row">
                <span>Workflow Completion Rate:</span>
                <span><strong>{{ ((overall_success | length) * 100.0 / (total_hosts | int)) | round(1) if (total_hosts | int) > 0 else 0.0 }}%</strong></span>
              </div>
              <div class="metric-row">
                <span>Report Generation Time:</span>
                <span>{{ wf_iso_ts }}</span>
              </div>
              <div class="metric-row">
                <span>Total Execution Duration:</span>
                <span>{{ wf_display_ts }} series</span>
              </div>
              
              {% if ansible_stats.data.patch_method_map is defined %}
              <div class="metric-row">
                <span>Patch Methods Used:</span>
                <span>
                  {% set methods = ansible_stats.data.patch_method_map.values() | unique | list %}
                  {{ methods | join(', ') if methods | length > 0 else 'None detected' }}
                </span>
              </div>
              {% endif %}
            </div>

            {% if ansible_stats.data.patch_repos_used is defined and patch_success | length > 0 %}
            <div class="card">
              <h2>Repository Usage Summary</h2>
              {% for host in patch_success %}
              <div class="metric-row">
                <span>{{ host }}:</span>
                <span><code>{{ ansible_stats.data.patch_repos_used[host] | default([]) | join(', ') | default('No repos recorded') }}</code></span>
              </div>
              {% endfor %}
            </div>
            {% endif %}

            {% if ansible_stats.data.health_details_map is defined and health_success | length > 0 %}
            <div class="card">
              <h2>System Health Details</h2>
              {% for host in health_success %}
              {% set details = ansible_stats.data.health_details_map[host] | default({}) %}
              <div style="margin-bottom: 12px;">
                <strong>{{ host }}:</strong><br>
                <small>
                  Kernel: {{ details.kernel_version | default('Unknown') }} | 
                  SELinux: {{ details.selinux_status | default('Unknown') }} | 
                  SSH: {{ 'Running' if details.ssh_running | default(false) else 'Issues' }} | 
                  Disk: {{ 'OK' if details.disk_usage_ok | default(false) else 'High Usage' }}
                </small>
              </div>
              {% endfor %}
            </div>
            {% endif %}
            </div>
          </body></html>
      ignore_errors: true
      failed_when: false

    - name: Write enhanced report file
      copy:
        dest: "{{ wf_report_file }}"
        content: "{{ report_html }}"
        mode: "0644"
      ignore_errors: true
      failed_when: false
      register: report_write_result

    - name: Wait for file system sync
      pause:
        seconds: 1
      when: report_write_result.changed

    - name: Verify report file was created
      stat:
        path: "{{ wf_report_file }}"
      register: report_file_stat
      ignore_errors: true
      retries: 3
      delay: 1
      until: report_file_stat.stat.exists | default(false)

    - name: Debug report generation status
      debug:
        msg: |
          ========================================
          REPORT GENERATION COMPLETED
          ========================================
          Report Location: {{ wf_report_file }}
          Report Exists: {{ report_file_stat.stat.exists | default(false) }}
          CSV Directory: {{ wf_report_dir }}/
          Successfully Completed: {{ overall_success | length }}/{{ total_hosts | int }}
          Overall Success Rate: {{ ((overall_success | length) * 100.0 / (total_hosts | int)) | round(1) if (total_hosts | int) > 0 else 0.0 }}%
          ========================================
      ignore_errors: true
      failed_when: false

    # ===========================================
    # GITLAB PUBLISHING SECTION
    # ===========================================

    - name: Find CSV report files
      find:
        paths: "{{ wf_report_dir }}"
        patterns: "*.csv"
        recurse: true
      register: csv_files

    - name: Find HTML report files
      find:
        paths: "{{ wf_report_dir }}"
        patterns: "*.html"
        recurse: true
      register: html_files

    - name: Debug found files for publishing
      debug:
        msg:
          - "CSV files found: {{ csv_files.files | length }}"
          - "HTML files found: {{ html_files.files | length }}"
          - "CSV file list: {{ csv_files.files | map(attribute='path') | list }}"
          - "HTML file list: {{ html_files.files | map(attribute='path') | list }}"

    - name: Validate that reports were found for publishing
      assert:
        that:
          - (csv_files.files | length) > 0 or (html_files.files | length) > 0
        fail_msg: "No CSV or HTML reports found in {{ wf_report_dir }} for publishing"

    - name: Ensure git is configured globally
      shell: |
        git config --global user.name "{{ gitlab_user_name }}" 2>/dev/null || true
        git config --global user.email "{{ gitlab_user_email }}" 2>/dev/null || true
      changed_when: false
      ignore_errors: true

    - name: Ensure local repo parent directory exists
      file:
        path: "{{ repo_local_path | dirname }}"
        state: directory
        mode: "0755"
        recurse: true

    - name: Clone or update GitLab repository
      git:
        repo: "{{ gitlab_auth_url }}"
        dest: "{{ repo_local_path }}"
        version: "{{ gitlab_branch }}"
        update: true
        force: true
        accept_hostkey: true
        depth: 1
      register: git_operation
      no_log: true
      retries: 3
      delay: 5
      until: git_operation is succeeded

    - name: Verify Git operation succeeded
      fail:
        msg: "Git operation failed: {{ git_operation.msg | default('Unknown git error') }}"
      when: 
        - git_operation is defined
        - git_operation.failed | default(false)

    - name: Configure Git identity for this repo
      shell: |
        cd "{{ repo_local_path }}"
        git config user.name "{{ gitlab_user_name }}"
        git config user.email "{{ gitlab_user_email }}"
      changed_when: false

    - name: Ensure publication folder for this run exists
      file:
        path: "{{ repo_local_path }}/{{ publish_base_path }}/{{ wf_run_date | regex_replace('-', '') }}/{{ wf_run_ts }}"
        state: directory
        mode: "0755"
        recurse: true

    - name: Copy CSV files to GitLab repo
      copy:
        src: "{{ item.path }}"
        dest: "{{ repo_local_path }}/{{ publish_base_path }}/{{ wf_run_date | regex_replace('-', '') }}/{{ wf_run_ts }}/{{ item.path | basename }}"
        mode: "0644"
      loop: "{{ csv_files.files }}"
      when: csv_files.files | length > 0
      register: csv_copy_results

    - name: Copy HTML report files to GitLab repo
      copy:
        src: "{{ item.path }}"
        dest: "{{ repo_local_path }}/{{ publish_base_path }}/{{ wf_run_date | regex_replace('-', '') }}/{{ wf_run_ts }}/{{ item.path | basename }}"
        mode: "0644"
      loop: "{{ html_files.files }}"
      when: html_files.files | length > 0
      register: html_copy_results

    - name: Create per-run README index
      copy:
        dest: "{{ repo_local_path }}/{{ publish_base_path }}/{{ wf_run_date | regex_replace('-', '') }}/{{ wf_run_ts }}/README.md"
        mode: "0644"
        content: |
          # AAP Patch Workflow Report - {{ wf_display_ts }}

          **Generated:** {{ wf_iso_ts }}
          **Workflow Execution:** {{ wf_run_date }} {{ wf_display_ts }}

          ## Files in this Report

          ### Summary Reports
          {% for file in html_files.files %}
          - **[{{ file.path | basename }}]({{ file.path | basename }})** - Executive summary with success rates and phase breakdown
          {% endfor %}

          ### Detailed CSV Reports (Engineering Data)
          {% for file in csv_files.files %}
          - **{{ file.path | basename }}** - {{ file.path | basename | replace('_', ' ') | replace('.csv', '') | title }} host list
          {% endfor %}

          ## Workflow Statistics

          - **Total Hosts:** {{ total_hosts }}
          - **Successful:** {{ overall_success | length }} ({{ ((overall_success | length) * 100.0 / (total_hosts | int)) | round(1) if (total_hosts | int) > 0 else 0.0 }}%)
          - **Failed:** {{ overall_failure | length }} ({{ ((overall_failure | length) * 100.0 / (total_hosts | int)) | round(1) if (total_hosts | int) > 0 else 0.0 }}%)

          {% if ansible_stats.data.snapshot_name_expected is defined %}
          - **Snapshot Name:** `{{ ansible_stats.data.snapshot_name_expected }}`
          {% endif %}

          ## Available CSV Files

          The following CSV files contain detailed host lists for each workflow phase:

          - **discovery_success.csv** / **discovery_failure.csv** - Host discovery results
          - **contact_success.csv** / **contact_failure.csv** - SSH connectivity test results  
          - **snapshot_success.csv** / **snapshot_failure.csv** - VM snapshot creation results
          - **verify_success.csv** / **verify_failure.csv** - Pre-patch verification results
          - **patch_success.csv** / **patch_failure.csv** - Patch installation results
          - **reboot_success.csv** / **reboot_failure.csv** - System reboot results
          - **health_success.csv** / **health_failure.csv** - Post-patch health check results
          - **overall_success.csv** / **overall_failure.csv** - Final workflow completion status

          ## Navigation

          - **[Latest Reports](../)** - Browse other reports from {{ wf_run_date }}
          - **[All Reports](../../)** - Browse all historical patch reports

          ---
          *Generated by AAP Patch Automation*
      register: readme_create_result

    - name: Publish to GitLab (stage, commit, push)
      block:
        - name: Stage all changes for commit
          shell: |
            cd "{{ repo_local_path }}"
            git add --all "{{ publish_base_path }}/{{ wf_run_date | regex_replace('-', '') }}/{{ wf_run_ts }}/"
          changed_when: false
          register: git_add_result

        - name: Detect if any staged changes exist
          shell: |
            cd "{{ repo_local_path }}"
            git diff --staged --quiet || echo "CHANGED"
          register: staged
          changed_when: false
          failed_when: false

        - name: Show what will be committed
          shell: |
            cd "{{ repo_local_path }}"
            git diff --staged --name-status
          register: staged_files
          changed_when: false
          when: staged.stdout == "CHANGED"

        - name: Display staged files
          debug:
            msg: "Files to be committed: {{ staged_files.stdout_lines | default([]) | join(', ') }}"
          when: staged.stdout == "CHANGED"

        - name: Commit staged changes (only when needed)
          shell: |
            cd "{{ repo_local_path }}"
            git commit -m "Automated publication for {{ wf_run_date }} {{ wf_display_ts }}

            - Generated {{ csv_files.files | length }} CSV file(s)
            - Generated {{ html_files.files | length }} HTML report(s)
            - Processed {{ total_hosts }} total host(s)
            - {{ overall_success | length }} successful, {{ overall_failure | length }} failed
            
            Automated by: {{ gitlab_user_name }} <{{ gitlab_user_email }}>"
          when: staged.stdout == "CHANGED"
          register: git_commit
          changed_when: >
            git_commit.rc == 0 and
            (git_commit.stdout is search('file\\(s\\)? changed|insertion\\(s\\)?|deletion\\(s\\)?'))

        - name: Push commit to GitLab using access token
          shell: |
            cd "{{ repo_local_path }}"
            git push "{{ gitlab_auth_url }}" "{{ gitlab_branch }}"
          when: staged.stdout == "CHANGED"
          register: git_push
          no_log: true
          retries: 3
          delay: 10
          until: git_push is succeeded
          changed_when: >
            git_push.rc == 0 and
            (git_push.stdout is not search('Everything up-to-date'))
          failed_when: git_push.rc != 0

        - name: Calculate GitLab URLs for this run
          set_fact:
            gitlab_base_url: "{{ gitlab_repo_url | regex_replace('\\.git$', '') }}"
            report_web_path: "{{ publish_base_path }}/{{ wf_run_date | regex_replace('-', '') }}/{{ wf_run_ts }}"
            report_html_name: >-
              {{
                (html_files.files | map(attribute='path') | map('basename') | list | first | default('report.html'))
              }}

        - name: Export final results to workflow
          set_stats:
            data:
              gitlab_report_url: "{{ gitlab_base_url }}/-/tree/{{ gitlab_branch }}/{{ report_web_path }}"
              gitlab_html_url: "{{ gitlab_base_url }}/-/blob/{{ gitlab_branch }}/{{ report_web_path }}/{{ report_html_name }}"
              gitlab_raw_html_url: "{{ gitlab_base_url }}/-/raw/{{ gitlab_branch }}/{{ report_web_path }}/{{ report_html_name }}"
              gitlab_base_url: "{{ gitlab_base_url }}"
              publish_status: "success"
              published_files_count: "{{ (csv_files.files | length) + (html_files.files | length) + 1 }}"
              files_committed: "{{ 'true' if staged.stdout == 'CHANGED' else 'false' }}"
              wf_report_dir: "{{ wf_report_dir }}"
              wf_report_file: "{{ wf_report_file }}"
              wf_run_date: "{{ wf_run_date }}"
              wf_run_ts: "{{ wf_run_ts }}"
              wf_display_ts: "{{ wf_display_ts }}"
            aggregate: true
            per_host: false

        - name: Display publication results
          debug:
            msg: |
              ========================================
              PUBLICATION SUCCESSFUL
              ========================================
              Repository: {{ gitlab_repo_url }}
              Branch: {{ gitlab_branch }}
              Report Path: {{ report_web_path }}
              
              View Reports: {{ gitlab_base_url }}/-/tree/{{ gitlab_branch }}/{{ report_web_path }}
              HTML Report: {{ gitlab_base_url }}/-/blob/{{ gitlab_branch }}/{{ report_web_path }}/{{ report_html_name }}
              Direct HTML: {{ gitlab_base_url }}/-/raw/{{ gitlab_branch }}/{{ report_web_path }}/{{ report_html_name }}
              
              Files Published: {{ csv_files.files | length }} CSV, {{ html_files.files | length }} HTML, 1 README
              Changes Committed: {{ 'Yes' if staged.stdout == 'CHANGED' else 'No (no changes detected)' }}
              Published: {{ wf_iso_ts }}
              
              Local Files: {{ wf_report_dir }}/
              ========================================

      rescue:
        - name: Mark publication failure
          set_stats:
            data:
              publish_status: "failed"
              publish_error: "{{ ansible_failed_result.msg | default('Unknown error during GitLab publication') }}"
            aggregate: true
            per_host: false

        - name: Display failure information
          debug:
            msg: |
              ========================================
              PUBLICATION FAILED
              ========================================
              Error: {{ ansible_failed_result.msg | default('Unknown error') }}
              Repo: {{ gitlab_repo_url }}
              Branch: {{ gitlab_branch }}
              Local Path: {{ repo_local_path }}
              ========================================

        # Don't fail the entire playbook - report generation was successful
        - name: Continue despite publication failure
          debug:
            msg: "GitLab publication failed, but report generation was successful. Reports are available locally at {{ wf_report_dir }}/"

      always:
        - name: Cleanup temporary repository
          file:
            path: "{{ repo_local_path }}"
            state: absent
          ignore_errors: true

    - name: Final completion status
      debug:
        msg: |
          ========================================
          WORKFLOW COMPLETION SUMMARY
          ========================================
          Report Generation: SUCCESS
          Local Reports: {{ wf_report_dir }}/
          GitLab Publication: {{ publish_status | default('unknown') }}
          Total Files: {{ (csv_files.files | length) + (html_files.files | length) }} generated
          Workflow Run: {{ wf_display_ts }}
          ========================================
      ignore_errors: true
      failed_when: false
